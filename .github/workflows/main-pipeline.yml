name: main-pipeline

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  backend-frontend-build-test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        id: setup-java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'maven'

      - name: Verify Java version
        run: java -version

      - name: Build Backend
        run: |
          cd backend
          mvn clean install

      - name: Test Backend with JaCoCo
        run: |
          cd backend
          mvn test
          mvn jacoco:report

      - name: Build Backend package
        run: |
          cd backend
          mvn -B package --file pom.xml

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd frontend
          npm install

      - name: Run frontend tests
        run: |
          cd frontend
          npm test
        env:
          CI: true
      - name: Build frontend
        run: |
          cd frontend
          npm run build
  sonarcloud-analysis:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    needs: backend-frontend-build-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        id: setup-java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'maven'

      - name: Verify Java version
        run: java -version

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze backend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        working-directory: ./backend
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=sqs-projekt_backend \
            -Dsonar.organization=sqs-projekt \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Install dependencies
        run: |
          cd frontend
          npm install
      - name: Run frontend tests with coverage
        run: |
          cd frontend
          npm test 

      - name: Analyze frontend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd frontend
          npx sonar-scanner \
          -Dsonar.projectKey=sqs-projekt_frontend \
          -Dsonar.organization=sqs-projekt \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.sources=src \
          -Dsonar.tests=src \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  docker-container-build-push:
    needs: [backend-frontend-build-test, sonarcloud-analysis]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare lowercase variables
        run: echo "LOWER_REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend Docker image
        run: |
          docker build -t ghcr.io/${{env.LOWER_REPO_NAME}}/backend:latest ./backend
          docker push ghcr.io/${{ env.LOWER_REPO_NAME}}/backend:latest

      - name: Build and push frontend Docker image
        run: |
          docker build -t ghcr.io/${{ env.LOWER_REPO_NAME }}/frontend:latest ./frontend
          docker push ghcr.io/${{ env.LOWER_REPO_NAME }}/frontend:latest

  start-artillery-test:
    runs-on: ubuntu-latest
    needs: docker-container-build-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start Docker Container
        run: docker-compose -f ./docker-compose.yml up -d

      - name: Wait for services to start
        run: sleep 50

      - name: Install Artillery
        run: npm install -g artillery

      - name: Run Artillery test
        run: artillery run ./artillery-test/artillery.yml

  run-playwright-end2end:
    runs-on: ubuntu-latest

    needs: docker-container-build-push
    steps:
        - uses: actions/checkout@v3

        - name: Login to GitHub Container Registry
          uses: docker/login-action@v1
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Start Docker Container
          run: docker-compose -f ./docker-compose.yml up -d

        - name: Wait for services to start
          run: sleep 30

        - name: Build playwright
          run: |
            cd end2end
            npm ci
        - name: Install Browsers
          run:
            npx playwright install --with-deps

        - name: Run Playwright Tests
          run: |
            cd end2end
            sleep 60
            npx playwright test --config playwright.config.js
